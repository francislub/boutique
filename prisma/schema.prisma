// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CLIENT
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  MOBILE_MONEY
  CARD
  BANK_TRANSFER
  PAY_ON_DELIVERY
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String    @unique
  password       String
  phone          String?
  role           UserRole  @default(CLIENT)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  addresses      Address[]
  orders         Order[]
  reviews        Review[]
  wishlist       Wishlist?
  cart           Cart?
}

model Address {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  street         String
  city           String
  state          String
  postalCode     String
  country        String
  isDefault      Boolean   @default(false)

  // Relations
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String    @db.ObjectId
  orders         Order[]
}

model Category {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String    @unique
  description    String?
  slug           String    @unique
  parentId       String?   @db.ObjectId
  parent         Category? @relation("SubCategories", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subCategories  Category[] @relation("SubCategories")

  // Relations
  products       Product[]
}

model Product {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String
  slug           String    @unique
  price          Float
  compareAtPrice Float?
  cost           Float?
  sku            String    @unique
  barcode        String?
  weight         Float?
  dimensions     Json?     // {length, width, height}
  images         String[]  // Array of image URLs
  isActive       Boolean   @default(true)
  isFeatured     Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  category       Category  @relation(fields: [categoryId], references: [id], onUpdate: NoAction)
  categoryId     String    @db.ObjectId
  variants       ProductVariant[]
  inventory      Inventory?
  reviews        Review[]
  orderItems     OrderItem[]
  cartItems      CartItem[]
  wishlistItems  WishlistItem[]
}

model ProductVariant {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  sku            String    @unique
  price          Float?    // If different from base product
  attributes     Json      // {color, size, etc.}
  images         String[]  // Array of image URLs specific to this variant

  // Relations
  product        Product   @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  productId      String    @db.ObjectId
  inventory      InventoryItem[]
  orderItems     OrderItem[]
  cartItems      CartItem[]
}

model Inventory {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  totalQuantity  Int       @default(0)
  lowStockThreshold Int    @default(5)

  // Relations
  product        Product   @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  productId      String    @unique @db.ObjectId
  items          InventoryItem[]
}

model InventoryItem {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  quantity       Int
  location       String?   // e.g., "Warehouse A", "Store B"

  // Relations
  inventory      Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  inventoryId    String    @db.ObjectId
  variant        ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  variantId      String    @db.ObjectId
}

model Order {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber    String    @unique
  status         OrderStatus @default(PENDING)
  subtotal       Float
  tax            Float
  shipping       Float
  discount       Float     @default(0)
  total          Float
  notes          String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  user           User      @relation(fields: [userId], references: [id])
  userId         String    @db.ObjectId
  items          OrderItem[]
  payment        Payment?
  shippingAddress Address   @relation(fields: [addressId], references: [id])
  addressId      String    @db.ObjectId
}

model OrderItem {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  quantity       Int
  price          Float     // Price at time of purchase

  // Relations
  order          Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId        String    @db.ObjectId
  product        Product   @relation(fields: [productId], references: [id], onUpdate: NoAction)
  productId      String    @db.ObjectId
  variant        ProductVariant? @relation(fields: [variantId], references: [id], onUpdate: NoAction)
  variantId      String?   @db.ObjectId
}

model Payment {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  amount         Float
  method         PaymentMethod
  status         PaymentStatus @default(PENDING)
  transactionId  String?
  paymentDate    DateTime?

  // Relations
  order          Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId        String    @unique @db.ObjectId
}

model Review {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  rating         Int       // 1-5
  comment        String?
  createdAt      DateTime  @default(now())

  // Relations
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String    @db.ObjectId
  product        Product   @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  productId      String    @db.ObjectId
}

model Cart {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  updatedAt      DateTime  @updatedAt

  // Relations
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String    @unique @db.ObjectId
  items          CartItem[]
}

model CartItem {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  quantity       Int

  // Relations
  cart           Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId         String    @db.ObjectId
  product        Product   @relation(fields: [productId], references: [id], onUpdate: NoAction)
  productId      String    @db.ObjectId
  variant        ProductVariant? @relation(fields: [variantId], references: [id], onUpdate: NoAction)
  variantId      String?   @db.ObjectId
}

model Wishlist {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId

  // Relations
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String    @unique @db.ObjectId
  items          WishlistItem[]
}

model WishlistItem {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId

  // Relations
  wishlist       Wishlist  @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  wishlistId     String    @db.ObjectId
  product        Product   @relation(fields: [productId], references: [id], onUpdate: NoAction)
  productId      String    @db.ObjectId
}

model Promotion {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  code           String    @unique
  description    String?
  discountType   String    // percentage, fixed_amount
  discountValue  Float
  minPurchase    Float?
  maxUses        Int?
  usedCount      Int       @default(0)
  startDate      DateTime
  endDate        DateTime
  isActive       Boolean   @default(true)
}

